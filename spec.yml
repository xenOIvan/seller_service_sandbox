openapi: 3.0.0
info:
    title: 'Seller Services API'
    description: "This project is an <b>enhancement of the Digikala Marketplace API</b>. Its main goal is providing an API-based solution for Developers to use for implementing new Applications To improve Digikala Sellers Business\n### API count: 107"
    version: 1.0.0
servers:
    - { url: 'http://localhost:8000', description: 'Seller Services API (Local Mode)' }
paths:
    /api/v3/: { get: { tags: ['Healthcheck (1)'], summary: '', description: 'Return service details and settings.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: Undefined }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/auth/scopes: { get: { tags: ['Authentication (5)'], summary: '', description: 'List of available Scopes', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 50, type: integer } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { default: id, type: string, enum: [id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: asc, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ScopeListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number' }, item_per_page: { type: integer, description: 'number of item per page' }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { key: { type: string, description: 'this key is used when client redirect seller to get access', example: variant }, title: { type: string, description: 'The scope title in Persian', example: 'مدیریت تنوع و قیمت‌گذاری' }, description: { type: string, description: 'The definition of scope', example: 'امکان مشاهده و ویرایش اطلاعات مدیریت تنوع و قیمت‌گذاری پنل شما را خواهد داشت' }, access: { type: string, description: 'Define Access Level. "write" is for all APIs, but the "read" is for GET APIs', example: write, enum: [write, read] } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/auth/scopes/{client_code}': { get: { tags: ['Authentication (5)'], summary: '', description: 'List of available Scopes for The Client', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: client_code, description: null, required: false, schema: { default: null, type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ClientAvailableScopeListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { key: { type: string, description: 'this key is used when client redirect seller to get access', example: variant }, title: { type: string, description: 'The scope title in Persian', example: 'مدیریت تنوع و قیمت‌گذاری' }, description: { type: string, description: 'The definition of scope', example: 'امکان مشاهده و ویرایش اطلاعات مدیریت تنوع و قیمت‌گذاری پنل شما را خواهد داشت' }, access: { type: string, description: 'Define Access Level. "write" is for all APIs, but the "read" is for GET APIs', example: write, enum: [write, read] } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/auth/token: { post: { tags: ['Authentication (5)'], summary: '', description: 'Activate Client Access on Seller Resource and return access and refresh token', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { authorization_code: { default: '{authorization_code}', type: string } }, required: [authorization_code] }, example: { authorization_code: 'code generated when seller approved access request' } } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/auth/refresh-token: { post: { tags: ['Authentication (5)'], summary: '', description: 'Activate Client Access on Seller Resource and return access and refresh token', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { access_token: { default: '{access_token}', type: string }, refresh_token: { default: '{refresh_token}', type: string } }, required: [access_token, refresh_token] }, example: { access_token: '(jwt token string generated before)', refresh_token: '(refresh_token generated before)' } } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/auth/decrypt-code: { post: { tags: ['Authentication (5)'], summary: '', description: '(ONLY USE FOR TEST) decrypt auth_code with a valid private_key', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { authorization_code: { default: '{authorization_code}', type: string }, private_key: { default: '{private_key}', type: string } }, required: [authorization_code, private_key] }, example: { authorization_code: daldnadosdasndasdasdfnuwe, private_key: '-----BEGIN RSA PRIVATE KEY-----' } } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/search/v2: { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Based on search keyword and other filters prepared, this API gives data about products that are currently created on Digikala and seller might want to sell same one', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: 'search[keyword]', description: null, required: 'true', example: null, schema: { default: null, type: string } }, { in: query, name: 'search[categories]', description: null, required: false, example: null, schema: { default: null, type: option } }, { in: query, name: 'search[brands]', description: null, required: false, example: null, schema: { default: null, type: option } }, { in: query, name: 'search[types]', description: null, required: false, example: null, schema: { default: null, type: option } }, { in: query, name: 'search[colorPalettes]', description: null, required: false, example: null, schema: { default: null, type: option } }, { in: query, name: 'search[statuses]', description: null, required: false, example: null, schema: { default: null, type: option } }, { in: query, name: 'search[fake]', description: null, required: false, example: null, schema: { default: null, type: bool } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductSearchListViewV2 }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/search/suggestion/v2: { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Suggest Products to seller to sell based on the searched keyword. This is the first step of content creation process. it you want to add new product, first search it with this API. if found what you want, ', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: 'search[keyword]', description: null, required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductSearchSuggestionListViewV2 }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/product-creation/be-seller/{product_id}': { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: null, parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: product_id, description: null, required: false, schema: { default: null, type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: BeingProductSellerView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/product-creation/search/category/v2/{keyword}': { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'This api find and show data of related categories for searched category_id or Keyword', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: keyword, description: null, required: false, schema: { default: null, type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductCategorySearchListViewV2, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, description: '', example: 6351 }, text: { type: string, description: '', example: 'ظرف مربا و عسل' }, leaf: { type: boolean, description: '', example: true } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/product-creation/category/{category_id}/validation': { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'This API check if a Category is Restricted for seller to sale product or not. If not, it returns some data that is required to create product. it mostly used for 2nd step of product creation', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: category_id, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: force_marketplace_seller_id, description: force_marketplace_seller_id!, required: false, example: null, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductCreationStep2ObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/product/detail/validation: { post: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Add Valid Product details', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { category_id: { default: '{category_id}', type: integer }, division_id: { default: '{division_id}', type: integer }, model: { default: '{model}', type: string }, brand_id: { default: '{brand_id}', type: integer }, product_type_ids: { default: '{product_type_ids}', type: array }, color_id: { default: '{color_id}', type: integer }, is_iranian: { default: '{is_iranian}', type: boolean }, product_classes: { default: '{product_classes}', type: array }, fake: { default: '{fake}', type: boolean }, general_mefa_id: { default: '{general_mefa_id}', type: integer }, exclusive_mefa_id: { default: '{exclusive_mefa_id}', type: string }, package_width: { default: '{package_width}', type: integer }, package_height: { default: '{package_height}', type: integer }, package_length: { default: '{package_length}', type: integer }, package_weight: { default: '{package_weight}', type: integer }, description: { default: '{description}', type: string }, disadvantages: { default: '{disadvantages}', type: Undefined! }, advantages: { default: '{advantages}', type: Undefined! }, only_cf_fields: { default: '{only_cf_fields}', type: array }, force_marketplace_seller_id: { default: '{force_marketplace_seller_id}', type: integer }, draft_product_id: { default: '{draft_product_id}', type: integer }, platforms: { default: '{platforms}', type: array }, fake_reasons: { default: '{fake_reasons}', type: array } }, required: [category_id, brand_id, is_iranian] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/draft-product/drafts: { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Return List Of Seller Draft Products.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: force_marketplace_seller_id, description: force_marketplace_seller_id!, required: false, example: null, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/draft-product/count: { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Return Number Of Seller Draft Products.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: DraftProductCountObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/product-creation/draft-product/{draft_product_id}': { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Return a draft product entity', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: draft_product_id, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: force_marketplace_seller_id, description: force_marketplace_seller_id!, required: false, example: null, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: DraftProductObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/product-creation/{draft_product_id}/auto-title': { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Get Title Suggestion Data By Auto Title', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: draft_product_id, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: force_marketplace_seller_id, description: force_marketplace_seller_id!, required: false, example: null, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/auto-title/save: { post: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Validate Title', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { title_fa: { default: '{title_fa}', type: string }, title_en: { default: '{title_en}', type: string }, force_marketplace_seller_id: { default: '{force_marketplace_seller_id}', type: integer }, draft_product_id: { default: '{draft_product_id}', type: integer } }, required: [title_fa, draft_product_id] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/product-creation/attributes/{category_id}': { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Get Category Attributes', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: category_id, description: null, required: false, schema: { default: null, type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/attributes: { post: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Validate Attributes through product creation', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { length: { default: '{length}', type: number }, width: { default: '{width}', type: number }, height: { default: '{height}', type: number }, weight: { default: '{weight}', type: number }, attributes: { default: '{attributes}', type: array }, force_marketplace_seller_id: { default: '{force_marketplace_seller_id}', type: integer }, draft_product_id: { default: '{draft_product_id}', type: integer } }, required: [draft_product_id] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/images/requests/brand-logo/upload: { post: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Upload Brand Request Logo Image To Temp Storage', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { file: { default: '{file}', type: Undefined! } }, required: [file] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/images/requests/upload: { post: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Upload Content Request Image To Temp Storage', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { file: { default: '{file}', type: Undefined! } }, required: [file] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/images/upload: { post: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Upload Product Image To Temp Storage', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { slot: { default: '{slot}', type: integer }, file: { default: '{file}', type: Undefined! } }, required: [slot, file] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/images/ai: { post: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Check Image With AI', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { image_id: { default: '{image_id}', type: string }, url: { default: '{url}', type: string }, is_main: { default: '{is_main}', type: boolean } }, required: [image_id, is_main] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/save: { post: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Save Product', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { category_id: { default: '{category_id}', type: integer }, only_b2b: { default: '{only_b2b}', type: boolean }, photos_detail: { default: '{photos_detail}', type: array }, force_marketplace_seller_id: { default: '{force_marketplace_seller_id}', type: integer }, draft_product_id: { default: '{draft_product_id}', type: integer }, video_ids: { default: '{video_ids}', type: array } }, required: [category_id, only_b2b, photos_detail, draft_product_id] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/assign: { post: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Assign Product To Seller', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { product_id: { default: '{product_id}', type: integer } }, required: [product_id] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/brand/request: { post: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Create Brand Request Through Product Creation.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { logo_id: { default: '{logo_id}', type: Undefined! }, name_fa: { default: '{name_fa}', type: Undefined! }, name_en: { default: '{name_en}', type: Undefined! }, brand_origin: { default: '{brand_origin}', type: Undefined! }, description: { default: '{description}', type: Undefined! }, foreign_site_url: { default: '{foreign_site_url}', type: Undefined! }, iranian_registration_image_id: { default: '{iranian_registration_image_id}', type: Undefined! }, iranian_registration_url: { default: '{iranian_registration_url}', type: Undefined! }, force_marketplace_seller_id: { default: '{force_marketplace_seller_id}', type: integer }, category_id: { default: '{category_id}', type: integer }, site: { default: '{site}', type: Undefined! } }, required: [logo_id, name_fa, name_en, brand_origin, description, category_id] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/product-creation/brand: { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Search Brands By Name.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: 'search[title_fa]', description: null, required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[title_en]', description: null, required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/draft-products/seller: { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Return List Of Seller Draft Products.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: 'search[brand_ids]', description: null, required: false, example: null, schema: { default: null, type: array } }, { in: query, name: 'search[category_ids]', description: null, required: false, example: null, schema: { default: null, type: array } }, { in: query, name: 'search[near_expiration]', description: null, required: false, example: null, schema: { default: null, type: bool } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/draft-products/{draft_product_id}': { delete: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Delete a draft product', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: draft_product_id, description: null, required: true, schema: { default: null, type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/products/suggest/{field}/{value}': { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: "It's about product filter suggestions. \nYou can choose a field and search inside it with ID and titles. \nWe will bring you up to 10 entity suggestions.", parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: field, description: null, required: false, schema: { default: null, type: null } }, { in: path, name: value, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 50, type: integer } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { default: id, type: string, enum: [id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: asc, type: string } }, { in: query, name: field, description: 'you can choose from :brand, category, product_variant, supply_category, marketplace_seller, category_product_type', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: value, description: 'you can enter number and chars', required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductManagementFilterSuggestView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: {  } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/products/seller: { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'seller product list view', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 50, type: integer } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { default: id, type: string, enum: [id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: asc, type: string } }, { in: query, name: 'search[multi_search]', description: null, required: false, example: null, schema: { default: null, type: 'search box' } }, { in: query, name: 'search[category_id]', description: null, required: false, example: null, schema: { default: null, type: option } }, { in: query, name: 'search[brand_id]', description: null, required: false, example: null, schema: { default: null, type: option } }, { in: query, name: 'search[moderation_status]', description: null, required: false, example: null, schema: { default: null, type: option } }, { in: query, name: 'search[fake_status]', description: null, required: false, example: null, schema: { default: null, type: radio } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerProductManagementListView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/products/filters/seller: { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'seller product filters list view', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerProductManagementFiltersObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/products/{product_id}/score': { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Get Content Score of Product.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: product_id, description: null, required: false, schema: { default: null, type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/product-edit/{product_id}/publish': { post: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Publish Product.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: product_id, description: null, required: true, schema: { default: null, type: integer } }, { in: query, name: force_marketplace_seller_id, description: force_marketplace_seller_id!, required: false, example: null, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { force_marketplace_seller_id: { default: '{force_marketplace_seller_id}', type: integer } }, required: {  } }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/product-edit/{product_id}': { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'View Of Product For Edition.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: product_id, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: force_marketplace_seller_id, description: force_marketplace_seller_id!, required: false, example: null, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false }, put: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Edit Product Fields.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: product_id, description: null, required: true, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { category_id: { default: '{category_id}', type: integer }, division_id: { default: '{division_id}', type: integer }, model: { default: '{model}', type: string }, brand_id: { default: '{brand_id}', type: integer }, product_type_ids: { default: '{product_type_ids}', type: array }, color_id: { default: '{color_id}', type: integer }, is_iranian: { default: '{is_iranian}', type: boolean }, product_classes: { default: '{product_classes}', type: array }, fake: { default: '{fake}', type: boolean }, general_mefa_id: { default: '{general_mefa_id}', type: integer }, exclusive_mefa_id: { default: '{exclusive_mefa_id}', type: string }, package_width: { default: '{package_width}', type: integer }, package_height: { default: '{package_height}', type: integer }, package_length: { default: '{package_length}', type: integer }, package_weight: { default: '{package_weight}', type: integer }, description: { default: '{description}', type: string }, disadvantages: { default: '{disadvantages}', type: Undefined! }, advantages: { default: '{advantages}', type: Undefined! }, only_cf_fields: { default: '{only_cf_fields}', type: array }, force_marketplace_seller_id: { default: '{force_marketplace_seller_id}', type: integer }, length: { default: '{length}', type: number }, width: { default: '{width}', type: number }, height: { default: '{height}', type: number }, weight: { default: '{weight}', type: number }, attributes: { default: '{attributes}', type: array }, title_fa: { default: '{title_fa}', type: string }, title_en: { default: '{title_en}', type: string }, photos_detail: { default: '{photos_detail}', type: array }, video_ids: { default: '{video_ids}', type: array } }, required: {  } }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/product-edit/{category_id}': { post: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Get Title Suggestion Data By Product Feilds ', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: category_id, description: null, required: true, schema: { default: null, type: integer } }, { in: query, name: force_marketplace_seller_id, description: force_marketplace_seller_id!, required: false, example: null, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { division_id: { default: '{division_id}', type: integer }, model: { default: '{model}', type: string }, brand_id: { default: '{brand_id}', type: integer }, product_type_ids: { default: '{product_type_ids}', type: array }, force_marketplace_seller_id: { default: '{force_marketplace_seller_id}', type: integer }, attributes: { default: '{attributes}', type: array } }, required: [brand_id] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/commission/commissions/{product_id}': { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Get commission related to product', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: product_id, description: null, required: false, schema: { default: null, type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductCommissionObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/commission/{category_id}/{brand_id}': { get: { tags: ['Product (33)'], summary: 'Scopes => product', description: 'Commission Of Combination Of Brand And Category', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: category_id, description: null, required: false, schema: { default: null, type: null } }, { in: path, name: brand_id, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: force_marketplace_seller_id, description: force_marketplace_seller_id!, required: false, example: null, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/variants: { get: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: 'List of seller variants.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 50, type: integer } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { default: id, type: string, enum: [id, product_variant_id, selling_stock, selling_price, marketplace_seller_stock, warehouse_stock] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: asc, type: string } }, { in: query, name: 'search[id]', description: 'variant id', required: false, example: null, schema: { default: null, type: integer } }, { in: query, name: 'search[shipping_type]', description: null, required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[active]', description: null, required: false, example: null, schema: { default: null, type: boolean } }, { in: query, name: 'search[moderation_status]', description: null, required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[category_ids]', description: 'Comma seperated category ids.', required: false, example: null, schema: { default: null, type: 'string,integer' } }, { in: query, name: 'search[buy_box_winner]', description: null, required: false, example: null, schema: { default: null, type: boolean } }, { in: query, name: 'search[in_competition]', description: null, required: false, example: null, schema: { default: null, type: boolean } }, { in: query, name: 'search[search_term]', description: 'Search in variant id, title and product id, title', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[price_terms]', description: 'Comma seperated price_terms ids.', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[out_of_stock]', description: null, required: false, example: null, schema: { default: null, type: boolean } }, { in: query, name: 'search[selling_channel]', description: 'selling channels', required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductVariantListView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}': { get: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: 'Get Product Variant data', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: variant_id, description: null, required: false, schema: { default: null, type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductVariantObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false }, put: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: 'Edit seller variant data.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: variant_id, description: null, required: true, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { seller_stock: { default: '{seller_stock}', type: integer }, maximum_per_order: { default: '{maximum_per_order}', type: integer }, selling_price: { default: '{selling_price}', type: number }, shipping_type: { default: '{shipping_type}', type: 'string,array' }, lead_time: { default: '{lead_time}', type: integer }, seller_lead_time: { default: '{seller_lead_time}', type: integer } }, required: {  } }, example: null } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/variants/b2b-activation: { put: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: 'Activate B2B on seller variants', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { variant_ids: { default: '{variant_ids}', type: array } }, required: [variant_ids] }, example: null } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/variants/import: { post: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: 'By this route, You can modify product configs by uploading an Excel file.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { file_id: { default: '{file_id}', type: integer } }, required: [file_id] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/variants/export: { post: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: null, parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { id: { default: '{id}', type: integer }, shipping_type: { default: '{shipping_type}', type: 'string,array' }, active: { default: '{active}', type: boolean }, moderation_status: { default: '{moderation_status}', type: 'string,array' }, category_ids: { default: '{category_ids}', type: string }, buy_box_winner: { default: '{buy_box_winner}', type: boolean }, in_competition: { default: '{in_competition}', type: boolean }, search_term: { default: '{search_term}', type: string }, price_terms: { default: '{price_terms}', type: string }, out_of_stock: { default: '{out_of_stock}', type: boolean }, archived: { default: '{archived}', type: boolean }, selling_channel: { default: '{selling_channel}', type: string } }, required: {  } }, example: null } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/gold': { get: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: 'Gold Modal Data for variant.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: variant_id, description: null, required: false, schema: { default: null, type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false }, put: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: 'Edit seller variant gold data.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: variant_id, description: null, required: true, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { gold_profit: { default: '{gold_profit}', type: number }, gold_wage: { default: '{gold_wage}', type: number }, none_gold_wage: { default: '{none_gold_wage}', type: Undefined! }, none_gold_cost: { default: '{none_gold_cost}', type: Undefined! }, order_limit: { default: '{order_limit}', type: integer } }, required: [gold_profit, gold_wage, order_limit] }, example: null } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/price-calculator': { get: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: 'Calculate price with live Gold Price for Variant.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: variant_id, description: null, required: false, schema: { default: null, type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/activation': { put: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: 'Edit seller variant activation status.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: variant_id, description: null, required: true, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { activation: { default: '{activation}', type: boolean } }, required: [activation] }, example: null } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/b2b-prices': { get: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: 'Get B2B Modal Data for Variant.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: variant_id, description: null, required: false, schema: { default: null, type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false }, put: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: 'Edit seller variant b2b prices data.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: variant_id, description: null, required: true, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { b2b_prices: { default: '{b2b_prices}', type: array }, active: { default: '{active}', type: boolean } }, required: [b2b_prices, active] }, example: null } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/archive': { put: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: 'Edit seller variant data.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: variant_id, description: null, required: true, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { archive: { default: '{archive}', type: boolean } }, required: [archive] }, example: null } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/seller-stock': { patch: { tags: ['Product Variant (14)'], summary: 'Scopes => variant', description: 'Update variant seller stock amount.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: variant_id, description: null, required: true, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { seller_stock: { default: '{seller_stock}', type: integer } }, required: [seller_stock] }, example: null } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/orders: { get: { tags: ['Order (8)'], summary: 'Scopes => order', description: 'getting details of all order items to send for seller', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 50, type: integer } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { default: order_created_at, type: string, enum: [order_created_at] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: desc, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: AllSellerDigikalaOrderListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number' }, item_per_page: { type: integer, description: 'number of item per page' }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { product_variant_id: { type: integer, description: 'only god know this' }, product_image_url: { type: string, description: 'url to product image' }, product_variant_title: { type: string, description: 'title of product variant' }, supplier_code: { type: string, description: 'supplier code of variant' }, order_id: { type: integer, description: 'no body know' }, order_created_at: { type: string, format: 'Y-m-d\TH:i:s.uP', description: 'created_at of order item' }, warehouse_status_at: { type: string, format: 'Y-m-d\TH:i:s.uP', description: 'warehouse_status at or order' }, quantity: { type: integer, description: 'quantity of order item' }, selling_price: { type: integer, description: 'selling price of variant price of order item' }, amazing_discount: { type: integer, description: 'discount value of order item multiply by its quantity' }, discount_manager: { type: integer, description: 'discount_manger of order item' }, total_price: { type: integer, description: 'selling price multiply by order item quantit minus manger discount' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/orders/statistics: { get: { tags: ['Order (8)'], summary: 'Scopes => order', description: 'api for getting statistics for all order seller(shipped by dk and shipped by seller)', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerOrderStatisticsObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { all_shipped_by_dk: { type: integer, description: 'count all orders that are shipped by dk' }, shipped_by_seller_count: { type: integer, description: 'count all orders that are shipped by seller' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/orders/ongoing: { get: { tags: ['Order (8)'], summary: 'Scopes => order', description: 'List of Order items per variants.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 50, type: integer } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { default: order_items.commitment_date, type: string, enum: [order_items.commitment_date, order_items.order_id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: asc, type: string } }, { in: query, name: 'search[multi_search]', description: 'Search in variant id, title of product, product id and supplier code', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[category_ids]', description: 'Comma seperated category ids.', required: false, example: null, schema: { default: null, type: 'string,integer' } }, { in: query, name: 'search[shipping_nature_ids]', description: 'Comma seperated shipping nature ids. it must be in 1 or 3 or 2', required: false, example: null, schema: { default: null, type: 'string,integer' } }, { in: query, name: 'search[has_warehouse_stock]', description: 'does variant has warehouse stock or not', required: false, example: null, schema: { default: null, type: 'integer,enum', enum: [1, 0] } }, { in: query, name: 'search[is_past_and_today]', description: 'for selecting order items that their commitment_date is for today or past', required: false, example: null, schema: { default: null, type: 'integer,enum', enum: [1, 0] } }, { in: query, name: 'search[is_processing_status]', description: 'for selecting order items that their order status is equal to processing status', required: false, example: null, schema: { default: null, type: 'integer,enum', enum: [1, 0] } }, { in: query, name: 'search[to_commitment_date]', description: 'for selecting to commitment_date of order when seller select is_future order items', required: false, example: null, schema: { default: null, type: 'string,date' } }, { in: query, name: 'search[selected_variant_ids]', description: 'Comma seperated variant ids for variant that seller is selected', required: false, example: null, schema: { default: null, type: 'string,integer' } }, { in: query, name: 'search[is_committed]', description: 'for selecting order items that seller should prepare them and doesn''t have enough stock', required: false, example: null, schema: { default: null, type: 'integer,enum', enum: [1, 0] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerDigikalaOrderListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number' }, item_per_page: { type: integer, description: 'number of item per page' }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { variant_id: { type: integer, description: 'id of variant(jesus)' }, image_src: { type: string, description: 'link to image' }, title: { type: string, description: 'title of variant' }, shipping_nature: { type: object, description: 'shipping nature of variant(either small, medium or large)', properties: { key: { type: string, description: 'shipping nature of variant' }, title: { type: string, description: 'translation of shipping nature of variant' } } }, product_link: { type: string, description: 'link to product in dk site' }, product_id: { type: integer, description: 'brain storm! can you guess what is for it or not?' }, supplier_code: { type: string, description: 'supplier_code of variant' }, order_count: { type: integer, description: 'sum of quantity of all order items of variant' }, all_commitment: { type: integer, description: 'sum of all commitments for seller' }, commitment_past: { type: integer, description: 'count of all past commitment' }, commitment_past_and_today: { type: integer, description: 'count all commitment of today and past for seller' }, commitment_future: { type: integer, description: 'count of all future commitments of seller' }, available_stock: { type: integer, description: 'available stock of variant(warehouse_stock + warehouse_supply_stock + on the way stock of variant)' }, order_item_ids: { type: object, description: 'all order item ids of variant', properties: [''] }, can_create_package: { type: integer, description: 'a flag for detecting that seller can create package or not' } } } }, meta_data: { type: object, description: 'meta data', properties: { filters: { type: object, description: 'contains data about filter widgets', properties: { leaf_categories: { type: object, description: 'seller inventory categories', properties: { category_id: { type: string, description: 'map category id to category_title', example: category_title } } }, package_creation_date: { type: integer, description: 'the most count of days after tomorrow that seller can create package for tomorrow commitments' }, today_and_past_order_items_commitment_count: { type: integer, description: 'count of committed order items(sum of quantity) for seller that their commitment_dates are for past or today and its shipment is by dk' }, tomorrow_order_items_commitment_count: { type: integer, description: 'count of committed order items(sum of quantity) for seller that their commitment_dates are for tomorrow its shipment is by dk' }, available_stock_count: { type: integer, description: 'count of all available stock of seller variants either warehouse_stock, warehouse_supply_stock or on the way stock' }, unavailable_stock_count: { type: integer, description: 'count of all variants that seller should delivered to warehouse' }, small_shipping_nature_count: { type: integer, description: 'count of all is committed variants that has small shipping nature' }, medium_shipping_nature_count: { type: integer, description: 'count of all is committed variants that has medium shipping nature' }, heavy_shipping_nature_count: { type: integer, description: 'count of all is committed variants that has heavy shipping nature' }, warehouse_processing_count: { type: integer, description: 'count of order items that their orders have status warehouse_processing' } } }, ovl: { type: object, description: 'data about seller''s ovl', properties: { is_active: { type: boolean, description: 'indicate that seller ovl is active or not' }, limit: { type: integer, description: 'ovl of seller amount' }, daily_sales: { type: integer, description: 'daily sales of seller if last ovl changed at of seller is for today' } } }, modules: { type: object, description: 'data about seller modules', properties: { ship_by_seller: { type: integer, description: 'if seller has ship by seller module active is one, otherwise zero' } } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/orders/ongoing/statistics: { get: { tags: ['Order (8)'], summary: 'Scopes => order', description: 'statistics for order ongoing', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: to_commitment_date, description: 'iso formatted date for to commitment date', required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerDigikalaOrderStatisticsObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { tomorrow_order_items_commitment_count: { type: integer, description: 'order items count that have commitment date for tomorrow' }, future_per_days_is_committed_orders_count: { type: object, description: 'mapping date to orders count', properties: { date: { type: string, example: 'orders count on this date' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/orders/excel/export: { post: { tags: ['Order (8)'], summary: 'Scopes => order', description: 'Excel Export API for Details of Orders per variant', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { search: { default: '{search}', type: array }, sort: { default: '{sort}', type: 'string,array' }, order: { default: '{order}', type: 'string,array' } }, required: {  } }, example: { search: { has_warehouse_stock: true, is_processing_status: false, is_committed: false, is_past_today: true, to_commitment_date: '2023-10-24T00:00:00.000Z', category_ids: '1,2,3', shipping_nature_id: '1,2', multi_search: test }, sort: order_items.commitment_date, order: asc } } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/orders/{order_item_id}': { delete: { tags: ['Order (8)'], summary: 'Scopes => order', description: 'used for cancelling order item of seller', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: order_item_id, description: null, required: true, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { cancellation_reason_id: { default: '{cancellation_reason_id}', type: 'integer,array' }, count: { default: '{count}', type: integer } }, required: [cancellation_reason_id] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/order-items': { get: { tags: ['Order (8)'], summary: 'Scopes => order', description: null, parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: variant_id, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 50, type: integer } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { default: commitment_date, type: string, enum: [commitment_date, order_created_at] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: asc, type: string } }, { in: query, name: 'search[multi_search]', description: 'for now it just search in order id', required: false, example: null, schema: { default: null, type: integer } }, { in: query, name: 'search[send_past_and_today]', description: 'for selecting past and today is committed order', required: false, example: null, schema: { default: null, type: integer } }, { in: query, name: 'search[to_order_item_commitment_date]', description: 'for selecting to commitment_date of order item', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[order_type]', description: 'for filtering on order status and shipment status', required: false, example: null, schema: { default: null, type: 'string,enum', enum: [in_review, processing, ready_to_process] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: VariantOrdersListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { order_id: { type: integer, description: 'id of order' }, order_item_created_at: { type: string, description: 'order item create at in format Y-m-d\TH:i:s.uP' }, warehouse_status_at: { type: string, description: 'warehouse_status_at of order in format Y-m-d\TH:i:s.uP' }, quantity: { type: integer, description: 'quantity of order item' }, commitment_date: { type: string, description: 'commitment date of order item' }, selling_price: { type: integer, description: 'selling price of variant price variant' }, amazing_discount: { type: integer, description: 'discount value of order multiply by quantity of order item' }, total_price: { type: integer, description: 'selling price multiply by quantity of order item' }, can_be_canceled: { type: boolean, description: 'one if seller can canceled order other wise zero(processing orders can''t be canceled)' } } } }, meta_data: { type: object, description: 'meta data', properties: { filter: { type: object, description: 'statistics for filters widget', properties: { today_and_past_commitments_count: { type: integer, description: 'count of is committed orders of variant that have commitment_date lte today' }, tomorrow_commitments_count: { type: integer, description: 'count of is committed orders of variant that have commitment_date gt today' } } }, cancellation_reasons: { descriptions: 'mapping of id to title of all possible order item cancellation reasons', type: object, properties: { id: { type: object, description: 'id of cancellation reason', properties: { key: { type: string, description: 'english title of cancellation reason' }, title: { type: string, description: 'persian title of cancellation reason' } } } } }, product_image_url: { type: string, description: 'link to product image' }, product_id: { type: integer, description: 'id pf product' }, product_title: { type: string, description: 'title of product' }, product_url: { type: string, description: 'link to product' }, variant_id: { type: string, description: 'id of variant' }, variant_url: { type: string, description: 'link to product config page' }, supplier_code: { type: string, description: 'supplier_code of variant' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/order-items/statistics': { get: { tags: ['Order (8)'], summary: 'Scopes => order', description: null, parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: variant_id, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: to_commitment_date, description: 'filter for to commitment date', required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: VariantDigikalaOrderStatisticsObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { tomorrow_commitments_count: { type: integer, description: 'count of tomorrow commitments count' }, is_committed_tomorrow_orders_per_day: { type: object, description: 'count of orders per day', properties: { date: { type: string, example: 'orders count on this date' } } }, package_creation_date: { type: integer, description: 'allowed package creation date' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/inventories: { get: { tags: ['Inventories (4)'], summary: 'Scopes => inventory', description: 'Get Inventories', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: 'search[stock_status]', description: null, required: false, example: null, schema: { default: null, type: string, enum: [has_warehouse_stock, has_not_warehouse_stock, has_marketplace_seller_stock, has_not_marketplace_seller_stock, soon_out_of_stock] } }, { in: query, name: 'search[selling_stock]', description: 'selling stock must be 0, 1', required: false, example: null, schema: { default: null, type: integer } }, { in: query, name: 'search[active]', description: 'active must be 0, 1', required: false, example: null, schema: { default: null, type: integer } }, { in: query, name: 'search[category_id]', description: 'category id', required: false, example: null, schema: { default: null, type: integer } }, { in: query, name: 'search[search_field]', description: 'search filed must {product_id, product_variant_id and serial}', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[product_filter]', description: null, required: false, example: null, schema: { default: null, type: string, enum: [has_dead_stock, active, inactive] } }, { in: query, name: 'search[warehouse_filter]', description: null, required: false, example: null, schema: { default: null, type: string, enum: [1, 50, 28, 48, others] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerInventoriesListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: {  } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/inventories/{product_variant_id}': { get: { tags: ['Inventories (4)'], summary: 'Scopes => inventory', description: 'Get Inventories Dead Stock.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: product_variant_id, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: 'search serial', description: null, required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerInventoriesDeadStockListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: {  } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/inventories/{product_variant_id}/export': { get: { tags: ['Inventories (4)'], summary: 'Scopes => inventory', description: 'Export product variant inventory detail', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: product_variant_id, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: 'search[product_variant_id]', description: null, required: false, example: null, schema: { default: null, type: integer } }, { in: query, name: 'search[serial]', description: null, required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerInventoriesDetailExcelExportView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/inventories/export: { post: { tags: ['Inventories (4)'], summary: 'Scopes => inventory', description: 'Export Inventories', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { stock_status: { default: '{stock_status}', type: 'string,array' }, selling_stock: { default: '{selling_stock}', type: 'integer,array' }, active: { default: '{active}', type: 'integer,array' }, category_id: { default: '{category_id}', type: 'integer,integer' }, search_field: { default: '{search_field}', type: 'integer,string' }, product_filter: { default: '{product_filter}', type: array }, warehouse_filter: { default: '{warehouse_filter}', type: array } }, required: {  } }, example: null } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/packages: { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'list of seller packages', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 10, type: integer } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { default: created_at, type: string, enum: [id, created_at] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: desc, type: string } }, { in: query, name: 'search[multi_search]', description: 'searching in package number or serial or supplier_code or package status', required: false, example: null, schema: { default: null, type: 'string,integer' } }, { in: query, name: 'search[type]', description: 'type of package', required: false, example: null, schema: { default: null, type: 'string,enum', enum: [order_fulfilment, consignment] } }, { in: query, name: 'search[status]', description: null, required: false, example: null, schema: { default: null, type: 'string,enum', enum: [new, received, partially_received, rejected, error, deleted] } }, { in: query, name: 'search[delivery_type]', description: 'delivery type of package', required: false, example: null, schema: { default: null, type: 'string,enum', enum: [seller, digikala, mobile_hub, post, compensation] } }, { in: query, name: 'search[package_created_at_from]', description: 'created at of package from(na baba!!) in js iso format', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[package_created_at_to]', description: 'created at of package ins iso format', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[package_received_at_from]', description: 'created at of package from(na baba!!) in js iso format', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[package_received_at_to]', description: 'received at of package ins iso format(ghavi)', required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: PackageListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number' }, item_per_page: { type: integer, description: 'number of item per page' }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { package_id: { type: integer, description: 'google it' }, package_number: { type: string, description: 'number of package' }, type: { type: string, description: 'type of package' }, shipping_nature: { type: object, description: 'shipping nature of package', properties: { key: { type: string, description: 'shipping nature fa' }, title: { type: string, description: 'shipping nature en' } } }, status: { type: object, properties: { key: { type: string, description: 'status in english' }, title: { type: string, description: 'status in persian' } }, description: 'status of package' }, delivery_type: { type: string, description: 'delivery type of package' }, created_at: { type: string, description: 'created_at of package in iso format' }, received_at_forecast: { type: string, description: 'received at forecast of package in iso format' }, received_at: { type: string, description: 'received at of package in iso fromat' }, warehouse: { type: object, properties: { id: { type: integer, description: 'id of mobile hub if delivery type of package is mobile hub, if delivery type is digikala it is seller warehouse id other wise it is warehouse id' }, title: { type: string, description: 'title of warehouse' } } }, is_shippable_by_dk: { type: boolean, description: 'flag that shown that seller can create shipment for package or not' }, time_cope: { type: object, description: 'time scope of packages', properties: { start: { type: integer }, end: { type: integer } } }, can_delete: { type: boolean, description: 'flag that determine seller can delete package or not' }, show_print_label_package: { type: boolean, description: 'flag that indicate seller can print label package or not' }, show_print_label_serials: { type: boolean, description: 'flag that indicate seller can print label serial or not' }, show_print_receive_receipt: { type: boolean, description: 'flag that indicate seller can print receive receipt or not' } } } }, meta_data: { type: object, description: 'meta data', properties: { filters: { type: object, description: 'data for filters', properties: { package_delivery_types: { type: array, items: { type: object, description: 'delivery type in for translation object', properties: { key: { type: string, description: 'delivery type in en' }, title: { type: string, description: 'delivery type in persian' } } } }, package_types: { type: array, description: 'all package types with their translations', items: { type: object, properties: { key: { type: string, description: 'package type in en' }, title: { type: string, description: 'package type in fa' } } } }, package_statuses: { type: array, description: 'all package statuses with their translations', items: { type: object, properties: { key: { type: string, description: 'package status in en' }, title: { type: string, description: 'package status in fa' } } } } } }, is_shipment_allowed: { type: boolean, description: 'flag that show that seller can create shipment or not' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false }, post: { tags: ['Package (11)'], summary: 'Scopes => package', description: null, parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { debug_mode: { default: '{debug_mode}', type: boolean }, packages: { default: '{packages}', type: array }, package_type: { default: '{package_type}', type: array }, order_commitment_type: { default: '{order_commitment_type}', type: array } }, required: [packages, package_type] }, example: null } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/packages/warehouses: { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'For getting warehouses based on delivery type', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: delivery_type, description: 'delivery type that is chosen by seller', required: false, example: null, schema: { default: null, type: 'string,enum', enum: [seller, digikala, mobile_hub, post, compensation] } }, { in: query, name: shipping_nature_id, description: 'shipping nature of package', required: false, example: null, schema: { default: null, type: 'integer,enum', enum: [1, 2] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: PackageWarehousesListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, description: 'id  of warehouse' }, title: { type: string, description: 'title of warehouse' }, address: { type: string, description: 'type of warehouse' }, postal_code: { type: string }, latitude: { type: string, description: 'latitude of warehouse' }, longitude: { type: string, description: 'longitude of warehouse' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/packages/warehouses/{warehouse_id}/capacities': { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'This API used for getting capacity of warehouse', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: warehouse_id, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: delivery_type, description: 'delivery type of package', required: false, example: null, schema: { default: null, type: 'string,enum', enum: [digikala, mobile_hub, seller] } }, { in: query, name: date, description: 'date for delivered package in format Y-m-d\TH:i:s.uP', required: false, example: null, schema: { default: null, type: 'string,date' } }, { in: query, name: package_type, description: 'package type either order fulfilment or consignment', required: false, example: null, schema: { default: null, type: 'string,enum', enum: [order_fulfilment, consignment] } }, { in: query, name: shipping_nature_id, description: 'shipping_nature_id of package', required: false, example: null, schema: { default: null, type: integer } }, { in: query, name: variants, description: 'comma seperated variant ids of package', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: counts, description: 'comma seperated count of variant id in order with variants query param', required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: PackageWarehouseCapacitiesObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { capacities: { type: array, description: 'capacity data of warehouses', items: { type: object, properties: { capacity_id: { type: integer, description: 'id of capacity either id of mobile_hub or id of marketplace_fulfillment_inbound_capacities' }, starts_at: { type: integer, description: 'hour of start(for mobile_hub and seller delivery type)' }, ends_at: { type: integer, description: 'hour of end(for mobile_hub and seller delivery type)' }, date: { type: integer, description: 'date for delivering package(just for post delivery type)' }, remained_size_chunk: { type: integer, description: 'remained size of chunk' }, disabled: { type: boolean, description: 'is chunk disabled or not', example: false } } } }, price: { type: string, description: 'price of delivery only for mobile hu delivery type(it''s float)' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/packages/{package_id}': { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'By this route, you will get a package object view.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: package_id, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: 'search[multi_search]', description: 'for search on product variant id, supplier code and product id', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[status]', description: 'comma seperated status for filter package item status', required: false, example: null, schema: { default: null, type: 'string,enum', enum: [new, received, partially_received, rejected, deleted] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: PackageDetailListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { package_products: { type: array, items: { type: object, description: 'product of package', properties: { package_item_id: { type: integer, description: 'id of package item (booooom)' }, title: { type: string, description: 'title of variant' }, dkp: { type: integer, description: 'id of product' }, product_link: { type: string, description: 'link to product on digikala site' }, dkpc: { type: integer, 'description ': 'id of variant' }, delivered_count: { type: integer, description: 'real count of package item' }, ordered_count: { type: integer, description: 'expected count of package' }, supplier_code: { type: string, description: 'supplier_code of variant' }, serials: { type: array, items: { type: object, description: 'serials of package item', properties: { id: { type: integer, description: 'package item serial id' }, serial: { type: string, description: 'serial of package item' }, expiration_date: { type: string, description: 'expiration date of item serial', format: 'Y-m-d\TH:i:s.uP' }, production_date: { type: string, description: 'manufacture date of item serial', format: 'Y-m-d\TH:i:s.uP' }, status: { type: object, properties: { 'status en': { type: string, description: 'status in en map to status fa', example: 'status in fa' } } }, show_print_label_package: { type: boolean, description: 'flag that indicate can print label package pr not' } } } }, image: { type: string, description: 'link to product image' }, status: { type: object, properties: { 'status en': { type: string, description: 'status of package', example: 'package status in persian' } } } } } } } } }, meta_data: { type: object, description: 'meta data', properties: { package_id: { type: integer, description: 'id of package' }, package_number: { type: string, description: 'number of package' }, package_delivery_type: { type: object, description: 'delivery type of package', properties: { key: { type: string, description: 'package delivery type in en' }, title: { type: string, description: 'package delivery type in fa' } } }, seller_created: { type: boolean, description: 'flag that determine seller created this package or it is created in fc' }, package_status: { type: object, description: 'status of package', properties: { status: { type: string, description: 'status of package', example: 'package status in persian' } } }, package_received: { type: object, properties: { warehouse: { type: object, properties: { id: { type: integer, description: 'id of warehouse (na baba!), warehouse id in case seller, post, compensation, seller address id in case digikala, mobile hub id in case mobile_hub' }, title: { type: string, description: 'title of warehouse (na baba!), warehouse title in case seller, post, compensation, seller address title in case digikala, hub address title in case mobile_hub' } } }, time_scope: { type: object, properties: { start: { type: integer, description: 'start hour of time scope' }, end: { type: integer, description: 'end hour of time scope' } } } } }, shipping_nature: { type: object, description: 'shipping nature of package', properties: { shipping_nature_id: { type: string, description: 'id of shipping nature', example: 'translated of shipping nature in persian' } } }, status_count: { type: object, description: 'count of each status of package item', properties: { status: { type: object, properties: { count: { type: integer, description: 'count of status in package' }, title: { type: string, 0: 'title status in fa' } } } } }, show_export_receipt: { type: boolean, description: 'flag for indication that export receipt should shown or not' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false }, delete: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'By this route, you can delete package', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: package_id, description: null, required: true, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/packages/{package_id}/excel/export': { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: null, parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: package_id, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: 'search[multi_search]', description: 'field for search on product id, variant id, supplier code', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[status]', description: 'comma seperated status for filter package item status', required: false, example: null, schema: { default: null, type: 'string,enum', enum: [new, received, partially_received, rejected, deleted] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: PackageDetailExcelExportView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { file_link: { type: string, description: 'link to exported excel file in cdn' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/packages/consignment/variants: { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: null, parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 50, type: integer } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { default: id, type: string, enum: [id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: asc, type: string } }, { in: query, name: variant_ids, description: 'comma seperated variant ids that seller want create package for them', required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerCreateConsignmentPackageListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { shipping_nature_id: { type: object, properties: { shipping_nature: { type: object, properties: { key: { type: string, description: 'shipping nature en' }, title: { type: string, description: 'shipping nature fa' } } }, shipping_nature_id: { type: integer, description: 'id of shipping nature(na baba!)' }, variants: { type: array, description: 'variant with determined shipping nature id', items: { type: object, properties: { product_variant_id: { type: integer, description: 'only god knows' }, product_variant_title: { type: string, description: 'title of product variant' }, product_image_url: { type: string, description: 'link to product image' }, product_id: { type: string, description: 'id of product' }, shipping_nature: { type: object, description: 'shipping nature of variant', properties: { key: { type: string, description: 'shipping nature of variant in en' }, title: { type: string, description: 'shipping nature of variant in fa' } } }, supplier_code: { type: string, description: 'supplier code of variant' }, on_the_way_stock: { type: integer, description: 'on the way stock of variant(which seller making package for them and not received them yet)' }, dk_inventory: { type: integer, description: 'warehouse_stock of variant' }, allowed_consignment_count: { type: integer, description: 'maximum count that seller can create consignment for variant' } } } } } } } } }, meta_data: { type: object, description: 'meta data', properties: { package_infos: { type: object, properties: { shipment_abilities: { type: object, properties: { key: { type: string, description: 'delivery type en' }, title: { type: string, description: 'translated delivery type' } } } } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/packages/order-fulfilment/variants: { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'view of order items group by variant for creating package', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 50, type: integer } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { default: commitment_date, type: string, enum: [commitment_date] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: asc, type: string } }, { in: query, name: '[order_item_ids]', description: 'comma seperated order item ids that seller want create package for them', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: '[order_commitment_type]', description: 'either commitment type for today(1) or tomorrow(2) or all(3)', required: false, example: null, schema: { default: null, type: integer } }, { in: query, name: 'search[commitment_to]', description: 'commitment_to date in iso format', required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerCreateOrderFulfilmentPackageListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { shipping_nature_id: { type: object, properties: { shipping_nature: { type: object, properties: { key: { type: string, description: 'shipping nature en' }, title: { type: string, description: 'shipping nature fa' } } }, shipping_nature_id: { type: integer, description: 'id of shipping nature(na baba!)' }, variants: { type: array, description: 'variant with determined shipping nature id', items: { type: object, properties: { variant_id: { type: integer, description: 'I asked this from jesus, he answered it with doubt: {id of variant}' }, product_variant_title: { type: string, description: 'title of product variant' }, product_id: { type: integer, description: 'ask chat gpt' }, product_image_url: { type: string, description: 'link to product image' }, product_url_on_dk_site: { type: string, description: 'link to product on site' }, supplier_code: { type: string, description: 'supplier code pf variant' }, shipping_nature_id: { type: integer, description: 'id of shipping nature of variant' }, shipping_nature: { type: object, properties: { title: { type: string, description: 'shipping nature type en' }, key: { type: string, description: 'shipping nature type fa' } } }, quantity: { type: integer, description: 'quantity of order item' }, available_stock: { type: object, properties: { on_the_way_stock: { type: integer, description: 'on the way stocks of variant' }, warehouse_stock: { type: integer, description: 'sum of warehouse_stock  and warehouse_supply_stock of variant' } } }, sent_optimal: { type: integer, description: 'count of optimal sent for variant seller should sent that we have available stocks for all of its order items' }, has_IMEI: { type: boolean, description: 'if category of product of variant is IMEI inventory is true otherwise false' }, has_expiry_date: { type: boolean, description: 'if category of product of variant has expiry date or product nature of product of variant is fresh otherwise false' } } } } } } } } }, meta_data: { type: object, description: 'meta data', properties: { package_infos: { type: object, properties: { shipment_abilities: { type: object, properties: { key: { type: string, description: 'delivery type en' }, title: { type: string, description: 'translated delivery type' } } } } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false }, post: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'view of order items group by variant for creating package (method is POST because long url issue)', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { order_item_ids: { default: '{order_item_ids}', type: array } }, required: [order_item_ids] }, example: null } } }, responses: { 200: { description: Undefined }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/variants/packages/consignment: { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: null, parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 10, type: integer } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { default: _id, type: string, enum: [_id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: desc, type: string } }, { in: query, name: 'search[multi_search]', description: 'field for multi search on product_id or product_variant_id or supplier_code of variant', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[shipping_nature_id]', description: 'shipping nature of variant', required: false, example: null, schema: { default: null, type: 'integer,enum', enum: [1, 3, 2] } }, { in: query, name: 'search[selected_variant_ids]', description: 'comma seperated variant ids that are selected', required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ConsignmentListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number' }, item_per_page: { type: integer, description: 'number of item per page' }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { product_variant_id: { type: integer, description: 'no body knows' }, product_variant_title: { type: string, description: 'title of variant' }, product_id: { type: integer, description: 'id of product' }, link_to_product: { type: string, description: 'link to product on digikla site' }, product_image_url: { type: string, description: 'product image url on object storage' }, shipping_nature: { type: object, properties: { key: { type: string, description: 'shipping nature of variant in en' }, title: { type: string, description: 'shipping nature of variant int fa' } } }, supplier_code: { type: string, description: 'supplier code of variant' }, on_the_way_stock: { type: integer, description: 'on the way stock of variant(making package for them)' }, dk_inventory: { type: integer, description: 'warehouse stock + marketplace seller stock of variant' }, allowed_count_consignment: { type: integer, description: 'allowed count for variant to creating consignment for it' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/shipments/dk: { get: { tags: ['Shipments (5)'], summary: 'Scopes => shipment', description: 'Get dk pickup seller''s shipments', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: 'search[created_at_end]', description: 'The end time of shipments creation', required: false, example: null, schema: { default: null, type: 'Y-m-d\TH:i:s.uP' } }, { in: query, name: 'search[shipment_receive_at_start]', description: 'The start time of shipments receive', required: false, example: null, schema: { default: null, type: 'Y-m-d\TH:i:s.uP' } }, { in: query, name: 'search[shipment_receive_at_end]', description: 'The end time of shipments receive', required: false, example: null, schema: { default: null, type: 'Y-m-d\TH:i:s.uP' } }, { in: query, name: 'search[shipment_status]', description: 'The shipment status. null means you want all status', required: false, example: null, schema: { default: null, type: 'string,enum', enum: [new, received, partially_received, rejected, error] } }, { in: query, name: 'search[multi_search]', description: 'field for search on shipment number, serial, variant_id and supplier code', required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: DKPickupShipmentsListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number' }, item_per_page: { type: integer, description: 'number of item per page' }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, description: 'id of shipment:D' }, shipment_number: { type: string, description: 'shipment number string' }, created_at: { type: string, description: 'time of creation', format: 'Y-m-d\TH:i:s.uP' }, pickup_warehouse_title: { type: string, description: 'warehouse title' }, pickup_date: { type: string, description: 'pick up date', format: 'Y-m-d\TH:i:sO' }, cost: { type: integer, description: 'shipment const' }, volume: { type: string, description: 'volume (cm3 or m3)' }, status: { type: string, description: 'status :D' }, total_volume: { type: integer, description: 'total volume of shipment' }, total_weight: { type: integer, description: 'total weight of shipment' }, min_distance: { type: integer, description: 'min distance to warehouse for packages of shipment' }, can_delete: { type: boolean, description: 'flag that indicates can we delete shipment or not' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false }, post: { tags: ['Shipments (5)'], summary: 'Scopes => shipment', description: 'create shipments.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { pickup_date: { default: '{pickup_date}', type: string }, time_scope: { default: '{time_scope}', type: array }, package_ids: { default: '{package_ids}', type: array }, warehouse_id: { default: '{warehouse_id}', type: Undefined! } }, required: [pickup_date, time_scope, package_ids, warehouse_id] }, example: null } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/shipments/dk/packages: { get: { tags: ['Shipments (5)'], summary: 'Scopes => shipment', description: null, parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 50, type: integer } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { default: id, type: string, enum: [id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: asc, type: string } }, { in: query, name: package_ids, description: 'comma seperated package ids', required: false, example: null, schema: { default: null, type: string } }, { in: query, name: 'search[warehouse_id]', description: warehouse_id, required: false, example: null, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: DKShipmentCreationPackagesListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, description: 'id of package' }, package_number: { type: string, description: 'number of package' }, shipment_type: { type: object, properties: { key: { type: string, description: 'type of package(en)' }, title: { type: string, description: 'type of package(fa)' } } }, shipping_nature: { type: object, properties: { key: { type: string, description: 'shipping nature of package(en)' }, title: { type: string, description: 'shipping nature of package(fa)' } } }, created_at: { type: string, description: 'created at of package in iso format' }, shipment_cost: { type: integer, description: 'cost of shipment in RIAL' } } } }, meta_data: { type: object, description: 'meta data', properties: { warehouse: { type: object, properties: { time_scopes: { type: array, example: [8-10, 10-12, 12-14, 14-16], description: 'time scope ({start_at}_{end_at}' } } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/shipments/dk/{shipment_id}': { get: { tags: ['Shipments (5)'], summary: 'Scopes => shipment', description: 'Get dk pickup seller''s shipments detail', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: shipment_id, description: null, required: false, schema: { default: null, type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: DKPickupShipmentObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { id: { type: integer, description: 'id of shipment:D' }, shipment_number: { type: string, description: 'shipment number string' }, created_at: { type: string, description: 'time of creation', format: 'Y-m-d\TH:i:s.uP' }, pickup_warehouse_title: { type: string, description: 'warehouse title' }, pickup_date: { type: string, description: 'pick up date', format: 'Y-m-d\TH:i:sO' }, cost: { type: integer, description: 'shipment const' }, volume: { type: string, description: 'volume (cm3 or m3)' }, status: { type: string, description: 'status :D' }, total_volume: { type: integer, description: 'total volume of shipment' }, total_weight: { type: integer, description: 'total weight of shipment' }, min_distance: { type: integer, description: 'min distance to warehouse for packages of shipment' }, can_delete: { type: boolean, description: 'flag that indicates can we delete shipment or not' }, packages: { type: object, description: 'packages of shipment', properties: { package_id: { type: object, description: 'id of package', properties: { id: { type: integer, description: 'id of package' }, package_number: { type: string, description: 'number of package(wooooow!)' }, type: { type: object, properties: { key: { type: string, description: 'type of package in en' }, title: { type: string, description: 'type of package in fa' } } }, shipping_nature: { type: object, properties: { shipping_nature_id: { type: string, description: 'mapping of shipping nature to it''s translation', example: 'shipping nature fa' } } }, create_date: { type: string, description: 'created at of package', format: 'Y-m-d\TH:i:s.uP' }, estimated_pickup_date: { type: string, description: 'received forecast of package', format: 'Y-m-d\TH:i:s.uP' }, status: { type: object, properties: { key: { type: string, description: 'status of package in en' }, title: { type: string, description: 'status pf package in fa' } } } } } } }, packages_count: { type: integer, description: 'count of packages in shipment' }, time_scope: { type: object, description: 'time scope of package received at forecast', properties: { start: { type: integer, description: 'start hour of time scope' }, end: { type: integer, description: 'end hour of time scope' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false }, delete: { tags: ['Shipments (5)'], summary: 'Scopes => shipment', description: 'delete shipments.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: shipment_id, description: null, required: true, schema: { default: null, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/profile: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get seller''s profile data in bulk or mini format.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/profile/business: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get profile business data.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileBusinessObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false }, patch: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Edit seller business data.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { type: { default: '{type}', type: array }, first_name: { default: '{first_name}', type: string }, last_name: { default: '{last_name}', type: string }, national_id: { default: '{national_id}', type: Undefined! }, company_name: { default: '{company_name}', type: string }, company_type: { default: '{company_type}', type: 'string,array' }, company_registration_number: { default: '{company_registration_number}', type: string }, company_national_id_number: { default: '{company_national_id_number}', type: string }, company_economic_number: { default: '{company_economic_number}', type: string }, company_authorized_representative: { default: '{company_authorized_representative}', type: string } }, required: [type] }, example: null } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/profile/store: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get profile store data.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileStoreObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/profile/address: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get seller''s profile seller address data.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileAddressListView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/profile/warehouse: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get seller''s profile warehouse address data.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileWarehouseAddressListView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/profile/document: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get profile document data.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileDocumentObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/profile/training: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get profile training data.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileTrainingObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/profile/performance: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get profile performance data.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfilePerformanceObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/questions: { get: { tags: ['Q&A (3)'], summary: 'Scopes => question', description: 'Get a list of seller''s questions.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: 'search[answer-status]', description: null, required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: QuestionAndAnswerListView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/questions/{question_id}': { get: { tags: ['Q&A (3)'], summary: 'Scopes => question', description: 'Get a seller''s question details.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: question_id, description: null, required: false, schema: { default: null, type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerProductQuestionObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/questions/answer: { post: { tags: ['Q&A (3)'], summary: 'Scopes => question', description: 'Answer to a question that is asked in shop platform.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { question_id: { default: '{question_id}', type: integer }, answer: { default: '{answer}', type: string }, file_ids: { default: '{file_ids}', type: array } }, required: [question_id, answer] }, example: null } } }, responses: { 200: { description: SellerProductQuestionObjectView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/insight/overview: { get: { tags: ['Insight (4)'], summary: 'Scopes => insight', description: 'Get seller''s insight overview list for each day.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: range, description: null, required: false, example: null, schema: { default: null, type: string, enum: [last_7_days, last_14_days, last_30_days, before_last_14_days] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: InsightOverviewListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: {  } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/insight/top-deactivated: { get: { tags: ['Insight (4)'], summary: 'Scopes => insight', description: 'Get seller''s insight overview list for each day.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: InsightTopDeactivatedListView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/insight/sales-reports: { get: { tags: ['Insight (4)'], summary: 'Scopes => insight', description: 'Get sales reports', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: range, description: null, required: false, example: null, schema: { default: null, type: string, enum: [last_7_days, last_14_days, last_30_days, before_last_14_days] } }, { in: query, name: category_id, description: null, required: false, example: null, schema: { default: null, type: integer } }, { in: query, name: net_item_sold_from, description: null, required: false, example: null, schema: { default: null, type: integer } }, { in: query, name: net_item_sold_to, description: null, required: false, example: null, schema: { default: null, type: integer } }, { in: query, name: net_sales_amount_from, description: null, required: false, example: null, schema: { default: null, type: float } }, { in: query, name: net_sales_amount_to, description: null, required: false, example: null, schema: { default: null, type: float } }, { in: query, name: search_field, description: null, required: false, example: null, schema: { default: null, type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: InsightSalesReportsListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: {  } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/insight/overview/export: { post: { tags: ['Insight (4)'], summary: 'Scopes => insight', description: 'Export insight overview', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/lightening-deal/products: { get: { tags: ['Lightening (10)'], summary: 'Scopes => lightening_deal', description: 'List of seller products to choose from for lightening deal. ', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 10, type: integer } }, { in: query, name: sort, description: 'Define list sort column. can be bestSeller | mostViewed | mostStock | userDemanded | latest', required: false, example: null, schema: { default: latest, type: enum } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: desc, type: string } }, { in: query, name: 'search[q]', description: 'The search Keyword to lookup in product titles, can be a dkp or dkpc. ', required: false, example: null, schema: { default: '', type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: LighteningDealProductListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: {  } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/lightening-deal/products/{product_id}': { get: { tags: ['Lightening (10)'], summary: 'Scopes => lightening_deal', description: 'Get a list of product variants for a seller based on the product ID.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: path, name: product_id, description: null, required: false, schema: { default: null, type: null } }, { in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 2000, type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: LighteningDealProductVariantListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: {  } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/lightening-deal/promotions: { get: { tags: ['Lightening (10)'], summary: 'Scopes => lightening_deal', description: 'Get a list of lightening deal promotions.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: LighteningDealPromotionsListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: {  } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/lightening-deal/promotions/{productId}': { get: { tags: ['Lightening (10)'], summary: 'Scopes => lightening_deal', description: 'Get a list of lightening deal promotions that are available for specified product ID.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: LighteningDealValidatedPromotionsListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: {  } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/lightening-deal/bids: { post: { tags: ['Lightening (10)'], summary: 'Scopes => lightening_deal', description: 'Create new lightening deal bid.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { bidsData: { default: '{bidsData}', type: array } }, required: [bidsData] }, example: null } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false }, get: { tags: ['Lightening (10)'], summary: 'Scopes => lightening_deal', description: 'List of seller products to choose from for lightening deal. ', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { default: 1, type: integer } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { default: 10, type: integer } }, { in: query, name: sort, description: 'Define list sort column. can be id', required: false, example: null, schema: { default: id, type: enum } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { default: desc, type: string } }, { in: query, name: 'search[status]', description: 'filter results. can be all | pending | payment | productSupply | approvedWinner | live | ended | lost', required: false, example: null, schema: { default: '', type: string } }, { in: query, name: 'search[startDate]', description: 'Timestamp in milliseconds', required: false, example: null, schema: { default: '', type: int } }, { in: query, name: 'search[endDate]', description: 'Timestamp in milliseconds', required: false, example: null, schema: { default: '', type: int } }, { in: query, name: 'search[q]', description: 'Product or product variant ID to use when querying', required: false, example: null, schema: { default: '', type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: LighteningDealBidsListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: {  } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    /api/v3/lightening-deal/bidsSummary: { get: { tags: ['Lightening (10)'], summary: 'Scopes => lightening_deal', description: null, parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: Undefined }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/lightening-deal/check-duplicate-dkp-in-promotion/{promotionId}/{productId}/{sellerId}': { get: { tags: ['Lightening (10)'], summary: 'Scopes => lightening_deal', description: null, parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: Undefined }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/lightening-deal/bids/{bidId}/payment-method': { post: { tags: ['Lightening (10)'], summary: 'Scopes => lightening_deal', description: 'change lightening deal bid payment method to wallet/credit.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { paymentMethod: { default: '{paymentMethod}', type: 'string,array' }, bidId: { default: '{bidId}', type: integer } }, required: [paymentMethod, bidId] }, example: null } } }, responses: { 200: { description: MessageApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
    '/api/v3/lightening-deal/validate/product/{productId}': { get: { tags: ['Lightening (10)'], summary: 'Scopes => lightening_deal', description: 'validates a product ID to see if product can participate in the auction.', parameters: [{ in: header, name: X-Response-Code, required: true, schema:{enum: [200, 400, 401, 403, 404, 429]}},{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: Undefined }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' } }, deprecated: false } }
tags:
    Healthcheck: { name: 'Healthcheck (1)', count: 1, new_count: 0 }
    Authentication: { name: 'Authentication (5)', count: 5, new_count: 0 }
    Product: { name: 'Product (33)', count: 33, new_count: 0 }
    'Product Variant': { name: 'Product Variant (14)', count: 14, new_count: 0 }
    Order: { name: 'Order (8)', count: 8, new_count: 0 }
    Inventories: { name: 'Inventories (4)', count: 4, new_count: 0 }
    Package: { name: 'Package (11)', count: 11, new_count: 0 }
    Shipments: { name: 'Shipments (5)', count: 5, new_count: 0 }
    Profile: { name: 'Profile (9)', count: 9, new_count: 0 }
    'Q&A': { name: 'Q&A (3)', count: 3, new_count: 0 }
    Insight: { name: 'Insight (4)', count: 4, new_count: 0 }
    Lightening: { name: 'Lightening (10)', count: 10, new_count: 0 }
components:
    securitySchemes: { bearerAuth: { type: http, scheme: bearer, bearerFormat: JWT } }
